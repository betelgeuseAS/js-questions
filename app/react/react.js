// –Ø–∫—â–æ —ñ–Ω—ñ—Ü—ñ—é—î—Ç—å—Å—è –≤–∞–∂–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –≤ useState, —Ç–æ —ó—ó –≤–∞—Ä—Ç–æ –æ–±–µ—Ä–Ω—É—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü—ñ—é,
// —Ç–æ–¥—ñ –Ω–µ –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è –∑–∞–π–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É.
(function () {
  // const [numbers, setNumbers] = useState(() => [1, 2, 3]);
});



// –Ø–∫—â–æ –≤ –º–µ–º–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–¥–∞–≤–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∏–≤–∏, —Ç–æ –≤—ñ–Ω –±—É–¥–µ
// –º–µ–º–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è, –∞–ª–µ —è–∫—â–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ç—É–¥–∏ –æ–±'—î–∫—Ç —á–∏ –º–∞—Å–∏–≤, —Ç–æ–¥—ñ –º–æ–º–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ —ñ
// –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥. –©–æ–± —Ü—å–æ–≥–æ —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∞—Ä—Ç–æ –ø–µ—Ä–µ–¥–≤–∞—Ç–∏ –º–µ–º–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±'—î–∫—Ç –∞–±–æ –º–∞—Å–∏–≤,
// —Ç–∞–∫—ñ –¥–∞–Ω—ñ –º–µ–º–æ–Ω—ñ–∑—É—é—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ö—É–∫–∞ useMemo.
(function () {
  import { useState, useMemo, memo } from 'react';
  import './styles.css';

  const List = ({ data }) => {
    console.log('Render List');

    return (
      <ul>
        {data.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    );
  }

  const MemoList = memo(List);

  export default function App() {
    console.log('Render App');

    const [value, setValue] = useState(0);

    // const list = ['One', 'Two', 'Three'];
    const memolist = useMemo(() => ['One', 'Two', 'Three'], []);

    return (
      <div className="App">
        <button onClick={() => setValue(value + 1)}>Click</button>

        <MemoList data={memolist} />
      </div>
    );
  }
})();



// –ú–µ–º–æ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –±—É–¥–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –±—É—Ç–æ–Ω. –ê–ª–µ —Ü–µ –ø—Ä–∞—Ü—é—î
// —è–∫—â–æ –≤ –º–µ–º–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏
// —Å–∏–ª–æ—á–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö (–æ–±'—î–∫—Ç, —Ñ—É–Ω–∫—Ü—ñ—è), —Ç–æ –º–µ–º–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ.
//
// –¢—É—Ç –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –¥–≤–∞ —Ä–∞–∑–∏, —Ü–µ —á–µ—Ä–µ–∑ —Ç–µ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è StrictMode
(function () {
  import React, { StrictMode, useState } from "react";
  import { createRoot } from "react-dom/client";

  function Movie({ title, releaseDate, memo }) {
    console.log("Render Movie");

    return (
      <div>
        <div>Movie title: {title}</div>
        <div>Release date: {releaseDate}</div>
      </div>
    );
  }

  const MemoizedMovie = React.memo(Movie);
  // const MemoizedMovie = Movie;

  function App() {
    const [value, setValue] = useState(true);

    return (
      <>
        <button onClick={() => setValue(!value)}>Click</button>
        <span>Current Value: {value.toString()}</span>

        <br />
        <br />

        <MemoizedMovie title="Heat" releaseDate="December 15, 1995" memo={true} />
      </>
    );
  }

  const rootElement = document.getElementById("root");
  const root = createRoot(rootElement);

  root.render(
    <StrictMode>
      <App />
    </StrictMode>
  );
});



// Disable console.log() in production and staging
(function () {
  // utils/remove-console.js
  export const GlobalDebug = (function () {
    var savedConsole = console;

    /**
     * @param {boolean} debugOn
     * @param {boolean} suppressAll
     */
    return function (debugOn, suppressAll) {
      var suppress = suppressAll || false;
      if (debugOn === false) {
        // Supress the default console functionality
        console = {};
        console.log = function () {};
        // Supress all type of consoles
        if (suppress) {
          console.info = function () {};
          console.warn = function () {};
          console.error = function () {};
        } else {
          console.info = savedConsole.info;
          console.warn = savedConsole.warn;
          console.error = savedConsole.error;
        }
      } else {
        console = savedConsole;
      }
    };
  })();

  // App.jsx
  import React, { Suspense, useEffect } from "react";
  // import { GlobalDebug } from "utils/remove-console";

  function App() {
    useEffect(() => {
      (process.env.NODE_ENV === "production" || process.env.REACT_APP_ENV === "STAGING")
      && GlobalDebug(false);
    }, []);

    console.log("I am just another dummy console log, suppose to be suppressed üôÇ");

    return (
      <Suspense fallback={<h3>Loading...</h3>}>
        <YourComponentsHere />
      </Suspense>
    );
  }

  export default App;
});



// ...
(function () {

})();
